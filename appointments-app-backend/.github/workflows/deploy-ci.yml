name: SAM Validate, Build, Test, Deploy

on:
  push:
    branches: [ main ]

permissions:
  issues: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SAM Validate
        run: sam validate

      - name: Configure variables
        shell: bash
        id: vars
        env:
          REPO: ${{ github.repository }}
          HASH: ${{ github.sha }}
          REF: ${{ github.ref }}
        run: |
          # Set variables
          BRANCH=${REF#refs/heads/}
          REPOSITORY=`echo $REPO | tr "/" "-"`
          ENVIRONMENT=$BRANCH-$REPOSITORY-${{ secrets.AWS_REGION }}
          # In this step we are setting variables and persisting them
          # into the environment so that they can be utilized in other steps
          echo "::set-output name=branch::$BRANCH"
          echo "::set-output name=repository::$REPOSITORY"
          echo "::set-output name=environment::$ENVIRONMENT"
          # Output variables to ensure their values are set correctly when ran
          echo "The region is ${{ secrets.AWS_REGION }}"
          echo "The repository is $REPOSITORY"
          echo "The environment is $ENVIRONMENT"
          echo "The branch is $BRANCH"

      - name: SAM Build
        run: sam build

      - name: Run unit tests
        run: npm test

      - name: Deploy to Dev
        run: sam deploy --config-env dev --no-confirm-changeset --no-fail-on-empty-changeset

      - name: Deploy to Staging
        if: success()
        run: sam deploy --config-env staging --no-confirm-changeset --no-fail-on-empty-changeset

  manual-approval:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Determine ChangeSet presence
        id: set_flag
        run: |
            if sam deploy --no-execute-changeset --no-fail-on-empty-changeset | tee changeset_output.txt | grep -q "No changes to deploy"; then
              echo "HAS_CHANGESET=false" >> $GITHUB_ENV
            else
              echo "HAS_CHANGESET=true" >> $GITHUB_ENV
      - name: Manual Approval
        if: env.HAS_CHANGESET == 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: me2resh  # List your approvers here
          minimum-approvals: 1  # Set the minimum number of approvals required
          issue-title: "Approval Required: Deploy to Production"
          issue-body: "Please review and approve the deployment changes."

  deploy-production:
    needs: manual-approval
    runs-on: ubuntu-latest
    if: ${{ env.HAS_CHANGESET == 'true' }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SAM Validate
        run: sam validate

      - name: SAM Build
        run: sam build

      - name: Deploy to Production
        run: sam deploy --config-env production --no-confirm-changeset --no-fail-on-empty-changeset
